# This is a rough example of using Okta as the authorization server as part of a SMART/FHIR deployment.
# It includes the following features:
# - standalone launch with launch parameters
# - a patient picker screen and OAuth2 scope selection and consent.
# - applicable proxies for properly handling public client authentication as well as returning launch parameters in a flexible way.
# - passthrough API endpoints for demo data, hosted by HAPI.org.

service: okta-smartfhir-auth-demo
  
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  
  logs:
    restApi: true
    
  environment:
#This variable will contain the live API URL (https://XXXXX.execute-api.us-east-1.amazonaws.com/dev)
    GATEWAY_URL:
      !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - ${opt:region, self:provider.region}
          - '.amazonaws.com/'
          - ${opt:stage, self:provider.stage}
          
    AUTHZ_ISSUER: _OKTA_AUTHZ_SERVER_ISSUER_
    AUTHZ_SERVER: _OKTA_AUTHZ_SERVER_ID_
    OKTA_ORG: _YOUROKTAORG_.oktapreview.com
    STATE_COOKIE_SIGNATURE_KEY: JustPutAReallyLongValueHere!
    
    
    API_KEY: _READONLY_API_KEY_
    
    PICKER_DISPLAY_NAME: Patient Picker
    PICKER_CLIENT_ID: _OKTA_PICKER_CLIENT_ID_
    PICKER_CLIENT_SECRET: _OKTA_PICKER_CLIENT_SECRET_
    
#Lambda functions
functions:

##METADATA ENDPOINTS
  metadata-endpoints:
    handler: metadata_endpoints.metadataEndpoints
    events:
      - http:
          path: /smart-configuration
          method: GET
		  cors: true
      - http:
          path: /.well-known/smart-configuration
          method: GET
		  cors: true
      - http:
          path: /metadata
          method: GET
		  cors: true
     
  keys_endpoint:
    handler: keys.keysEndpoint
    events:
      - http:
          path: /keys
          method: GET
          cors: true

##AUTHORIZE ENDPOINTS
  smart-authorize-proxy:
    handler: authorize.smartAuthorizeProxy
    events:
      - http:
          path: /authorize
          method: GET
      - http:
          path: /picker_oidc_callback
          method: GET
      - http:
          path: /smart_proxy_callback
          method: GET          

##TOKEN ENDPOINT
  smart-token-proxy:
    handler: token.smartTokenProxy
    events:
      - http:
          path: /token
          method: POST
		  cors: true
          
##PATIENT PICKER UI          
  patient_picker:
    handler: patient_picker.patientPickerApp
    events:

      - http:
          path: /patient_authorization
          method: GET
      - http:
          path: /patient_authorization
          method: POST
      - http:
          path: /static/{proxy+}
          method: GET
##TOKEN HOOK  
  token_hook:
    handler: token_hook.tokenHook
    events:
      - http:
          path: /tokenhook
          method: POST
 
 ##MOCK PATIENT API 
  mock_patient_service:
    handler: mock_patient_service.mockPatientService
    events:
      - http:
          path: /patientMockService
          method: GET


          
#############          
#HAPI Proxies
#############
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
          integration: http-proxy
          request:
            uri: http://hapi.fhir.org/baseR4/{proxy}
            parameters:
              paths:
                proxy: true      
#################
#END HAPI Proxies                
#################